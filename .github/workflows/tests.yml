# ===========================================
# Test CI/CD Pipeline for gogooku3-standalone
# ===========================================

name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ===========================================
  # Unit Tests
  # ===========================================

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist

      - name: Install test dependencies
        run: |
          pip install -e .[dev]

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src/gogooku3 --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: unit-tests-py${{ matrix.python-version }}

  # ===========================================
  # Integration Tests
  # ===========================================

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio testcontainers

      - name: Install test dependencies
        run: |
          pip install -e .[dev]

      - name: Run integration tests
        run: |
          pytest tests/ -k "integration" -v --tb=short
        env:
          REDIS_URL: redis://localhost:6379

  # ===========================================
  # E2E Tests
  # ===========================================

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Install test dependencies
        run: |
          pip install -e .[dev]

      - name: Run E2E tests
        run: |
          pytest tests/test_e2e_docker.py -v --tb=short

  # ===========================================
  # Health Check Tests
  # ===========================================

  health-check-tests:
    name: Health Check Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest psutil

      - name: Run health check tests
        run: |
          pytest tests/test_health_check.py -v --tb=short

  # ===========================================
  # Performance Tests
  # ===========================================

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark

      - name: Install test dependencies
        run: |
          pip install -e .[dev]

      - name: Run performance tests
        run: |
          pytest tests/ -k "performance" -v --benchmark-only --benchmark-save=benchmarks

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmarks
          path: .benchmarks/

  # ===========================================
  # Docker Tests
  # ===========================================

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose build

      - name: Test Docker Compose configuration
        run: |
          docker compose config --quiet

      - name: Start services
        run: |
          docker compose up -d
          sleep 30

      - name: Run container health checks
        run: |
          # Test MinIO health
          curl -f http://localhost:9000/minio/health/live || exit 1

          # Test ClickHouse health
          docker exec gogooku3-clickhouse clickhouse-client --query "SELECT 1" || exit 1

          # Test Redis health
          docker exec gogooku3-redis redis-cli ping || exit 1

      - name: Run health check endpoints
        run: |
          # Test health check endpoint
          python ops/health_check.py health --format json

          # Test metrics endpoint
          python ops/metrics_exporter.py --once

      - name: Stop services
        run: |
          docker compose down

  # ===========================================
  # Smoke Tests
  # ===========================================

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run smoke tests
        run: |
          # Test main module import
          python -c "import main; print('Main module imported successfully')"

          # Test basic CLI functionality
          python main.py --help

          # Test health check module
          python ops/health_check.py health

          # Test metrics exporter
          python ops/metrics_exporter.py --once

      - name: Test configuration validation
        run: |
          # Test docker-compose config
          docker compose config --quiet

          # Test .env.example exists
          [ -f .env.example ] && echo ".env.example exists" || exit 1

          # Test required Python modules
          python -c "import polars, pandas, torch, numpy; print('Core dependencies OK')"

  # ===========================================
  # Test Summary
  # ===========================================

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [
      unit-tests,
      integration-tests,
      e2e-tests,
      health-check-tests,
      performance-tests,
      docker-tests,
      smoke-tests
    ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          echo "# 🧪 Test Execution Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "**Test Date:** $(date)" >> test-summary.md
          echo "**Repository:** ${{ github.repository }}" >> test-summary.md
          echo "**Commit:** ${{ github.sha }}" >> test-summary.md
          echo "" >> test-summary.md

          echo "## 📊 Test Results" >> test-summary.md
          echo "" >> test-summary.md

          # Job status summary
          echo "| Test Suite | Status | Details |" >> test-summary.md
          echo "|------------|--------|---------|" >> test-summary.md

          # Unit Tests
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "| Unit Tests | ✅ Passed | Multiple Python versions |" >> test-summary.md
          else
            echo "| Unit Tests | ❌ Failed | Check logs |" >> test-summary.md
          fi

          # Integration Tests
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "| Integration Tests | ✅ Passed | Redis integration |" >> test-summary.md
          else
            echo "| Integration Tests | ❌ Failed | Check logs |" >> test-summary.md
          fi

          # E2E Tests
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "| E2E Tests | ✅ Passed | Docker workflow |" >> test-summary.md
          else
            echo "| E2E Tests | ❌ Failed | Check logs |" >> test-summary.md
          fi

          # Health Check Tests
          if [ "${{ needs.health-check-tests.result }}" == "success" ]; then
            echo "| Health Check Tests | ✅ Passed | System monitoring |" >> test-summary.md
          else
            echo "| Health Check Tests | ❌ Failed | Check logs |" >> test-summary.md
          fi

          # Performance Tests
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "| Performance Tests | ✅ Passed | Benchmark results |" >> test-summary.md
          else
            echo "| Performance Tests | ❌ Failed | Check logs |" >> test-summary.md
          fi

          # Docker Tests
          if [ "${{ needs.docker-tests.result }}" == "success" ]; then
            echo "| Docker Tests | ✅ Passed | Container health |" >> test-summary.md
          else
            echo "| Docker Tests | ❌ Failed | Check logs |" >> test-summary.md
          fi

          # Smoke Tests
          if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "| Smoke Tests | ✅ Passed | Basic functionality |" >> test-summary.md
          else
            echo "| Smoke Tests | ❌ Failed | Check logs |" >> test-summary.md
          fi

          echo "" >> test-summary.md
          echo "## 📈 Coverage & Performance" >> test-summary.md
          echo "" >> test-summary.md

          # Check for coverage reports
          if [ -d "test-artifacts" ]; then
            find test-artifacts -name "*.xml" -o -name "*.json" | head -10
          fi

          echo "" >> test-summary.md
          echo "## 🎯 Next Steps" >> test-summary.md
          echo "" >> test-summary.md
          echo "1. Review failed test suites and fix issues" >> test-summary.md
          echo "2. Analyze coverage reports for gaps" >> test-summary.md
          echo "3. Review performance benchmark results" >> test-summary.md
          echo "4. Update test cases based on new features" >> test-summary.md
          echo "" >> test-summary.md
          echo "---" >> test-summary.md
          echo "*Generated by GitHub Actions Test Pipeline*" >> test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Test Results Summary\n\n${summary}`
            });
