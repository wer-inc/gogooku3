# WANDB
WANDB_API_KEY=e9d88303ceecaf6037cfc47d3a8fa275211b138d

# JQuants API認証情報
JQUANTS_AUTH_EMAIL=wer.inc.jp@gmail.com
JQUANTS_AUTH_PASSWORD=aBcDeF123456

# 旧形式の環境変数名（互換性のため）
JQUANTS_EMAIL=wer.inc.jp@gmail.com
JQUANTS_PASSWORD=aBcDeF123456

# JQuants プラン管理
# 契約プランを指定（standard | premium）
# Premium移行時は "premium" に変更することで先物APIが自動有効化されます
JQUANTS_PLAN_TIER=standard

# JQuants API契約範囲（オプション）
# 重要: これは契約範囲の検証にのみ使用されます
# データ取得範囲には影響しません（要求期間 + 420日lookbackのみ取得）
#
# 例: 13日間のデータを要求 → 約300営業日取得（420日lookback含む）
#     契約範囲外を要求 → 即座にエラーで停止
#
# 【パターン1】ローリング契約（直近N年、推奨）
# 例: 10年プランなら今日から10年前まで毎日自動更新
JQUANTS_CONTRACT_YEARS=10  # 直近10年の契約（デフォルト: 10）
#
# 【パターン2】固定開始日の契約（ライトプラン等）
# 明示的に開始日を指定する場合（JQUANTS_CONTRACT_YEARSより優先）
# JQUANTS_SUBSCRIPTION_START=2015-10-13  # ライトプラン以上の固定契約
# JQUANTS_SUBSCRIPTION_END=  # 空の場合は現在日付まで
#
# 互換性のための代替設定名
# JQUANTS_MIN_API_DATE=2015-10-13
# JQUANTS_PLAN_START_DATE=2015-10-13

# BigQuery設定（将来用）
GOOGLE_APPLICATION_CREDENTIALS=/app/config/gogooku-2e409ab2934d.json

# その他の設定
DEBUG=0
TZ=Asia/Tokyo

# プロジェクト設定
PROJECT_NAME=gogooku3
OUTPUT_DIR=/home/ubuntu/gogooku3/output
LOG_LEVEL=INFO

# データ取得設定 (メモリ最適化版)
MAX_CONCURRENT_FETCH=40  # 並列リクエスト数（メモリ安全: 75→40）
MAX_PARALLEL_WORKERS=8   # CPU並列処理数（メモリ安全: 20→8）
CACHE_MAX_AGE_DAYS=30    # キャッシュ有効期限（日数）
# ML_PIPELINE_START_DATE=2015-10-13  # オプション: 過去データの強制取得（通常は不要）
#                                    # 設定すると常にこの日付から取得（短期データセットも遅くなる）
#                                    # 未設定なら要求期間+420日lookbackのみ取得（推奨）

# GPU設定 (メモリ最適化版)
FORCE_GPU=1
REQUIRE_GPU=1
USE_GPU_ETL=1
RMM_ALLOCATOR=cuda_async
RMM_POOL_SIZE=30GB        # GPUメモリプール（メモリ安全: 0→30GB, A100 80GBの~40%）
CUDF_SPILL=1
CUDA_VISIBLE_DEVICES=0
PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True

# メモリ監視設定
ENABLE_MEMORY_MONITOR=1
MEMORY_THRESHOLD_WARN=80  # 警告しきい値（%）
MEMORY_THRESHOLD_STOP=90  # 停止しきい値（%）

# データセット生成設定
DATASET_CHUNK_YEARS=1      # チャンク単位（年）
DATASET_MEMORY_LIMIT=70    # メモリ制限（%）

# キャッシュ管理設定
CACHE_CLEANUP_DAYS=30      # 自動削除対象（日数）
CACHE_MAX_SIZE=500M        # キャッシュ上限サイズ

# Phase 2: スマート部分一致キャッシュ最適化設定
USE_CACHE=1                # 価格データのキャッシュを有効化（1=有効, 0=無効）
                          # 重要: これがないと毎回API再取得（45-60秒のロス）
MIN_CACHE_COVERAGE=0.3    # 最小キャッシュカバレッジ閾値（0.0-1.0）
                          # 部分キャッシュのカバー率が30%未満なら全API取得に切替
                          # 例: 10日間要求で2日間しかキャッシュなし → APIから全取得
ENABLE_MULTI_CACHE=1      # 複数キャッシュファイル結合を有効化（1=有効, 0=無効）
                          # 単一ファイルで不足時、最大3ファイルを自動結合してカバレッジ向上
                          # 例: file1(1-5日)+file2(6-10日) → 10日間分を結合

# GPU学習デフォルト設定
GPU_TRAINING_ENABLED=1
DEFAULT_LEARNING_RATE=2e-4
DEFAULT_MAX_EPOCHS=75
ADV_GRAPH_TRAIN=1

# GCS (Google Cloud Storage) 設定
GCS_ENABLED=0                # 1で有効化、0で無効化（ローカルのみ）
GCS_BUCKET=gogooku-ml-data   # GCSバケット名
GCS_SYNC_AFTER_SAVE=1        # 保存後に自動同期 (1=有効, 0=無効)
LOCAL_CACHE_DIR=/home/ubuntu/gogooku3/output  # ローカルキャッシュディレクトリ
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json  # GCS認証情報