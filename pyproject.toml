[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gogooku3"
version = "2.0.0"
description = "Next-generation MLOps batch processing system for Japanese stock market"
readme = "README.md"
authors = [
    {name = "Gogooku Team"},
]
keywords = [
    "finance", "machine-learning", "mlops", "stock-market", 
    "graph-attention-networks", "time-series", "quantitative-finance"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry", 
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    # Core Python Libraries
    "numpy>=1.24.0",
    "pandas>=2.1.0", 
    "polars>=0.20.0",
    "scipy>=1.11.0",
    "pyarrow>=14.0.0",
    
    # ML/AI Framework
    "torch>=2.0.0",
    "torch-geometric>=2.4.0", 
    "scikit-learn>=1.3.0",
    "lightgbm>=4.0.0",
    
    # Technical Analysis
    "pandas-ta>=0.4.67b0",
    "pywt>=1.4.0",
    
    # Data Sources & APIs
    "aiohttp>=3.9.0",
    "requests>=2.31.0",
    "jpholiday>=0.1.9",
    
    # Feature Engineering & Graphs
    "networkx>=3.0",
    "joblib>=1.3.0",
    
    # Storage & Data
    "s3fs>=2023.12.0",
    "clickhouse-driver>=0.2.6",
    "redis>=5.0.0",
    
    # Data Validation & Quality
    "pandera>=0.17.0",
    "great-expectations>=0.18.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    
    # ML Tracking & Experiments
    "mlflow>=2.9.0",
    "optuna>=3.0.0",
    "feast>=0.35.0",
    
    # Visualization & Reporting
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "kaleido>=0.2.1",
    "jinja2>=3.1.0",
    
    # Workflow & Orchestration
    "dagster>=1.5.0",
    "dagster-webserver>=1.5.0",
    "hydra-core>=1.3.0",
    
    # Monitoring & Observability
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "tqdm>=4.65.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "PyYAML>=6.0.1",
    "loguru>=0.7.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0", 
    "pytest-asyncio>=0.21.0",
    "hypothesis>=6.90.0",
    
    # Code Quality
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.scripts]
gogooku3 = "gogooku3.cli:main"
# Broken entry points temporarily disabled - will be integrated into main CLI
# gogooku3-train = "scripts.train_atft:main"
# gogooku3-pipeline = "scripts.pipelines.run_pipeline:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
gogooku3 = ["py.typed", "**/*.yaml", "**/*.json"]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (handled by complexity tools)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # ignore unused imports in __init__.py
"tests/**/*.py" = ["B011"]  # allow assert False

[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gogooku3"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas_ta.*",
    "ta.*", 
    "feast.*",
    "dagster.*",
    "mlflow.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-q", "--tb=short", "-ra",
    "--cov=src/gogooku3", "--cov-report=term-missing",
    "--strict-markers",
    "--color=yes",
    # Skip exploratory tests by default
    "--ignore=tests/exploratory/"
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for workflows", 
    "slow: Tests that take more than 5 seconds",
    "requires_api: Tests that require external API access",
    "exploratory: Manual exploratory tests (not run in CI)",
    "smoke: marks tests as smoke tests",
]
filterwarnings = [
    "error::FutureWarning",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["src/gogooku3"]
omit = [
    "*/tests/*",
    "*/compat/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
